#########################################################################################################
## GCode Macros                                                                                        ##
## Replace the slicer's custom start and end g-code scripts with                                       ##
## START_PRINT and END_PRINT.                                                                          ##
#########################################################################################################

[save_variables]
filename: ~/klipper_config/variables.cfg ; variable storage file

#########################################################################################################
## Startup                                                                                             ##
#########################################################################################################

[delayed_gcode WELCOME]
initial_duration: 2.
gcode:
  M117 Ender-3 Ready

#########################################################################################################
## Start Print                                                                                         ##
#########################################################################################################

[gcode_macro START_PRINT]
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
  # Turn on Light
  SET_PIN PIN=light VALUE=1  
  # Use absolute coordinates
  G90
  # Reset the G-Code Z offset (adjust Z offset if needed)
  #SET_GCODE_OFFSET Z=0.0
  # Home the printer
  M117 Homing
  G28
  M117 Probing Bed
  # Level Bed If Last One Was 5 Prints Ago 
  #LEVEL_BED_ADVANCED MAX_AGE=5
  BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}  
# Use the bed mesh 
  BED_MESH_PROFILE LOAD=default
  # Reset Extruder
  G92 E0    
  # Move the nozzle near the bed
  G1 X0.1 Y0.1 Z10 F6000
  M117 Heating...
  # Start bed heating and continue
  M140 S{BED_TEMP}
  M104 S{EXTRUDER_TEMP} 
  M109 S{EXTRUDER_TEMP}
  M190 S{BED_TEMP}
  # Prime line
  PRIME_LINE
  M117 Printing

#########################################################################################################
## End Print                                                                                           ##
#########################################################################################################

[gcode_macro END_PRINT]
gcode:
  G91 ;Relative positioning
  G1 E-2 F2700 ;Retract a bit
  G1 E-2 Z0.2 F2400 ;Retract and raise Z
  G1 X5 Y5 F3000 ;Wipe out
  G1 Z20 ;Raise Z more
  G90 ;Absolute positioning
  G1 X0 Y200 ;Present print
  M106 S0 ;Turn-off fan
  M104 S0 ;Turn-off hotend
  M140 S0 ;Turn-off bed
  #SAVE_IF_SET     ; SAVE_CONFIG if a mesh was probed in START_PRINT
  M84 X Y E ;Disable all steppers but Z
  # Turn off Light
  SET_PIN PIN=light VALUE=0
  M117 Finished

#########################################################################################################
## LEVEL BED ADVANCED                                                                                  ##
## https://www.reddit.com/r/klippers/comments/qdr0g9/my_gcode_macro_to_mesh_level_the_bed_every_10th/  ##
## This is where the magic happens:                                                                    ##
## MAX_AGE is checked against the stored variable                                                      ##
## SAVE=1 can be used to force saving the mesh (restarts klipper,                                      ##
## so only for manual usage)                                                                           ##
## FORCE_LEVEL=1 forces a mesh probe even if MAX_AGE is not reached                                    ##
#########################################################################################################

#[gcode_macro LEVEL_BED_ADVANCED]
#description: Levels the bed if the last leveling was MAX_AGE runs ago. Force leveling by setting FORCE
#variable_save_at_end: 0
#gcode:
#  {% set max_age = params.MAX_AGE|default(5)|int %}
#  {% set force_level = params.FORCE|default(0)|int %}
#  {% set save = params.SAVE|default(0)|int %}

#  ; load level_age from stored variables
#  {% set svv = printer.save_variables.variables %}
#  {% if "level_age" not in svv %} ; first run
#    SAVE_VARIABLE VARIABLE=level_age VALUE={max_age}
#    {% set level_age = 1 %}
#  {% else %} ; load level_age and increment
#    {% set level_age = svv.level_age %}
#    SAVE_VARIABLE VARIABLE=level_age VALUE={level_age|int + 1}
#  {% endif %}
#  {action_respond_info("Bed mesh age is " + level_age|string) + "."} 

#  ; Level eventually
#  {% if force_level or (level_age >= max_age|int) %}
#    {action_respond_info("Bed mesh exceeded max age. Leveling...")} 

#    ; homing if not homed yet
#    {% if 'xy' not in printer.toolhead.homed_axes %}
#    G28
#    {% endif %}

#    BED_MESH_CALIBRATE
#    {% if save %}
#     SAVE_VARIABLE VARIABLE=level_age VALUE=1 ; reset counter
#      SAVE_CONFIG
#    {% else %}
#      SET_GCODE_VARIABLE MACRO=LEVEL_BED_ADVANCED VARIABLE=save_at_end VALUE=1
#    {% endif %}
#  {% else %}
#    {action_respond_info("Loading old bed mesh.")} 
#    BED_MESH_PROFILE LOAD=default
#  {% endif %} 

#########################################################################################################
## Runs SAVE_CONFIG if the g-code variable was set in start gcode                                      ##
#########################################################################################################

[gcode_macro SAVE_IF_SET]
gcode:
#  {% if printer["gcode_macro LEVEL_BED_ADVANCED"].save_at_end == 1 %}
  {action_respond_info("Saving was requested - saving and restarting now.")}
#  SAVE_VARIABLE VARIABLE=level_age VALUE=1
  SAVE_CONFIG
#  {% endif %}

#########################################################################################################
## Prime the nozzle                                                                                    ##
#########################################################################################################

[gcode_macro PRIME_LINE]
gcode: 
  M117 Priming
  G92 E0; Reset Extruder
  G1 Z5.0 F3000; Move Z Axis up little to prevent scratching of Heat Bed
  G1 X0.1 Y20 Z0.3 F5000.0; Move to start position
  G1 X0.1 Y200.0 Z0.3 F1500.0 E15; Draw the first line
  G1 X0.4 Y200.0 Z0.3 F5000.0; Move to side a little
  G1 X0.4 Y20 Z0.3 F1500.0 E30; Draw the second line
  G92 E0; Reset Extruder
  G1 Z2.0 F3000; Move Z Axis up little to prevent scratching of Heat Bed
  G1 X5 Y20 Z0.3 F5000.0 ; Move over to prevent blob squish

#########################################################################################################
## Cancel Print                                                                                        ##
#########################################################################################################

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  M117 Cancelling print
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  G91 ;Relative positioning
  G1 E-2 F2700 ;Retract a bit
  G1 E-2 Z0.2 F2400 ;Retract and raise Z
  G1 X5 Y5 F3000 ;Wipe out
  G1 Z50 ;Raise Z more
  G90 ;Absolute positionning
  G1 X0 Y200 ;Present print
  M106 S0 ;Turn-off fan
  M104 S0 ;Turn-off hotend
  M140 S0 ;Turn-off bed
  M84 X Y E ;Disable all steppers but Z
  # Turn off Light
  SET_PIN PIN=light VALUE=0
  M117 Print Cancelled!

#########################################################################################################
## Pause Print                                                                                         ##
#########################################################################################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  M117 Pausing print...
  {% set E = params.E|default(1.7) %}  
  {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 15.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 40) %}
      {% set z_safe = 40 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 E-{E} F2100
  G1 Z{z_safe} F900
  G90
  G0 X{x_park} Y{y_park} F6000
  G91

#########################################################################################################
## Resume Print                                                                                        ##
#########################################################################################################

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
  Resuming print...
  {% set E = params.E|default(1.7) %}G91
  G1 E{E} F2100
  RESTORE_GCODE_STATE NAME=PAUSE_state
  BASE_RESUME

#########################################################################################################
## Update Bed Mesh                                                                                     ##
#########################################################################################################

[gcode_macro G29]
gcode:
  M117 Probing Mesh  
  G28
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE
  M117 Saving Mesh
  SAVE_CONFIG

#########################################################################################################
## Bed Tilt Adjustment                                                                                 ##
#########################################################################################################

[gcode_macro CHECK_BED]
gcode:
  M117 Probing corners  
  SCREWS_TILT_CALCULATE
  M117 Probing complete

#########################################################################################################
## Head Repair Position                                                                                ##
#########################################################################################################

[gcode_macro PARK_HEAD]
gcode:
  G91 ;Relative positioning
  G1 Z100 ;Raise Z more
  G90 ;Absolute positioning
  G1 X115 Y0 F1500.0 ;Present print
  M84 X Y E ;Disable all steppers but Z
  M117 Head Parked

#########################################################################################################
## Turn Off Heaters                                                                                    ##
#########################################################################################################

[gcode_macro HEATERS_OFF]
gcode: 
  M108

[gcode_macro M108]
gcode:
  M104 S0
  M140 S0

#########################################################################################################
## Turn Off Motors                                                                                    ##
#########################################################################################################

[gcode_macro TURN_OFF_MOTORS]
gcode: 
  M84 ; motors off

#########################################################################################################
## Shutdown RPi & Turn Off Power On Idle                                                               ##
#########################################################################################################

[gcode_macro SHUTDOWN]
gcode:
  M117 Shutdown RPi
  {action_call_remote_method("shutdown_machine")}

[gcode_shell_command POWER_OFF]
command: curl -K /home/pi/.tasmotapass "http://192.168.1.85/cm?cmnd=Backlog%3BDelay%201200%3BPower%20OFF"
timeout: 2.0
verbose: false

[gcode_macro POWER_OFF]
gcode:
  RUN_SHELL_COMMAND CMD=POWER_OFF

[delayed_gcode DELAYED_POWEROFF]
initial_duration: 0.0
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
  POWER_OFF
  SHUTDOWN
  {% endif %}

[idle_timeout]
timeout: 300
gcode:
  M117 Power Off 5 min
  UPDATE_DELAYED_GCODE ID=DELAYED_POWEROFF DURATION=300

#########################################################################################################
## Telegram-BOT Timelapse                                                                              ##
#########################################################################################################

[gcode_macro _bot_data]
variable_lapse_video_size: 0
variable_lapse_filename: 'None'
variable_lapse_path: 'None'
gcode:
    M118 Setting bot lapse variables

#########################################################################################################
## Update Bed Mesh For Print Area Only                                                                 ##
## https://gist.github.com/ChipCE/95fdbd3c2f3a064397f9610f915f7d02                                     ##
#########################################################################################################

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

#########################################################################################################
## Dummy M205 Command                                                                                  ##
#########################################################################################################

[gcode_macro m205]
gcode:
  G4